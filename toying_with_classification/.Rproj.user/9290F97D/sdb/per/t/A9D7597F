{
    "collab_server" : "",
    "contents" : "# install.packages('titanic')\nrequire(titanic)\nrequire(randomForest)\nrequire(arules)\ndf <- titanic_train\n\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n#\n#                               Handcrafting features\n#\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n# creating categorical variables\ndf$Fareclass <- discretize(x = df$Fare, method = 'frequency', categories = 5)\ndf$Ageclass <-  discretize(x = df$Age, method = 'frequency', categories = 5)\ndf$Sex <- factor(df$Sex)\ndf$Embarked <- factor(df$Embarked)\n\n# quick view at survival rates\ntemp <- with(df, aggregate(x = Survived, by = list(Sex, Pclass), FUN = function(x) c(length(x), mean(x))))\ntemp <- cbind(temp[,-ncol(temp)], temp$x)\ncolnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')\n\n# train-test split\ndf <- df[sample(1:nrow(df)),]\nindex_train <- 1:floor(nrow(df)/2) \ndf_train <- df[index_train,]\ndf_test <- df[-index_train,]\n\n# logistic regression on titanic data\nm_logreg_0 <- glm(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, \n                  data = df_train, family = binomial('logit'))\nsummary(m_logreg_0)\nm_logreg_1 <- glm(formula = Survived ~ Sex * Pclass * Fareclass + Embarked + Parch + SibSp + Ageclass, \n                  data = df_train, family = binomial('logit'))\nsummary(m_logreg_1)\nm_logreg_2 <- glm(formula = Survived ~ Sex * Pclass * Fareclass, \n                  data = df_train, family = binomial('logit'))\nsummary(m_logreg_2)\n\n# LR predictions\nm_logreg <- list(m_logreg_0, m_logreg_1, m_logreg_2)\npredSurvived <- sapply(1:length(m_logreg), function(i){\n  p <- predict(object = m_logreg[[i]], newdata = df_test, type = 'response')\n  as.numeric(p)\n})\npredSurvived <- data.frame(predSurvived)\ncolnames(predSurvived) <- paste0('LR', 0:2)\n\n# big difficulty -> which combinations are impactful ? Decision Trees\n\n# Rpart\nrp0 <- rpart(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df_train)\npredSurvived$rp0 <- as.numeric(predict(object = rp0, newdata = df_test, type = 'matrix'))\n\n# random forest\nset.seed(643)\nrf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp, data = df_train, na.action = na.omit)\npredSurvived$rf0 <- as.numeric(as.character(predict(object = rf0, newdata = df_test, type = 'response')))\nvarImpPlot(rf0)\n\n# do lda\nm_lda <- lda(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp, data = df_train)\npredSurvived$LDA <- predict(object = m_lda, newdata = df_test)$posterior[,2]\n\n# visual comparison of model outputs\nmatplot(t(predSurvived), type ='l', col = 'black', lty = 1)\n\n#\npredSurvived$Cmin <- apply(predSurvived[,1:6], 1, function(x) min(x, na.rm = TRUE))\npredSurvived$Cmax <- apply(predSurvived[,1:6], 1, function(x) max(x, na.rm = TRUE))\n\n# comaring performances \nres <- lapply(1:ncol(predSurvived), function(i){\n  \n  r <- list('model_name' = colnames(predSurvived)[i])\n  \n  pred_is_not_na <- which(!is.na(predSurvived[,i]))\n  if(length(pred_is_not_na) == 0){\n    r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'\n    r$nb_NAs <- nrow(df_test)\n    return(r)\n  }\n  \n  r$error_msg <- ''\n  r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)\n  r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)\n  r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])\n  return(r)\n  \n})\n\n\n",
    "created" : 1533036239894.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1961528257",
    "id" : "A9D7597F",
    "lastKnownWriteTime" : 1533050325,
    "last_content_update" : 1533050325641,
    "path" : "~/Documents/singlecode/nour_exed/titanic_dataset.R",
    "project_path" : "titanic_dataset.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}