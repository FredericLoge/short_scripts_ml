cov(dfi)
)
})
est
mu
names(est) <- levels(iris$Species)
est
est <- lapply(X = 1:K, FUN = function(i){
dfi <- iris[iris$Species == levels(iris$Species)[i], 1:4]
list('mu' = colMeans(dfi), 'sigma' = cov(dfi))
})
names(est) <- levels(iris$Species)
names(est) <- levels(iris$Species)
names(est) <- levels(iris$Species)
est
global_mu <- colMeans(iris[,1:4])
est[[1]]$mu
est[[1]]$mu - global_mu
(est[[1]]$mu - global_mu)
t(est[[1]]$mu - global_mu) %*% (est[[1]]$mu - global_mu)
(est[[1]]$mu - global_mu) %*% t(est[[1]]$mu - global_mu)
K <- length(levels(iris$Species))
est <- lapply(X = 1:K, FUN = function(i){
dfi <- iris[iris$Species == levels(iris$Species)[i], 1:4]
list('n' = nrow(dfi), 'mu' = colMeans(dfi), 'sigma' = cov(dfi))
})
names(est) <- levels(iris$Species)
global_mu <- colMeans(iris[,1:4])
for(i in 1:K){
sb <- sb + est[[1]]$n * (est[[1]]$mu - global_mu) %*% t(est[[1]]$mu - global_mu)
}
sb <- array(data = 0, dim = c(4, 4))
for(i in 1:K){
sb <- sb + est[[1]]$n * (est[[1]]$mu - global_mu) %*% t(est[[1]]$mu - global_mu)
}
sb
global_mu <- colMeans(iris[,1:4])
sw <- array(data = 0, dim = c(4, 4))
sb <- array(data = 0, dim = c(4, 4))
for(i in 1:K){
sw <- sw + (est[[i]]$n-1) * est[[i]]$sigma
sb <- sb + est[[i]]$n * (est[[i]]$mu - global_mu) %*% t(est[[i]]$mu - global_mu)
}
solve(sw) %*% sb
eigen(solve(sw) %*% sb)
eig
eig <- eigen(solve(sw) %*% sb)
eig
eig$values
cumsum(eig$values)
cumsum(eig$values)/sum(eig$values)
eig
eig$vectors
eig$vectors[,1]
iris[,1:4] %*% eig$vectors[,1]
as.matrix(iris[,1:4]) %*% eig$vectors[,1]
new_dim <- as.matrix(iris[,1:4]) %*% eig$vectors[,1]
boxplot(new_dim ~ iris$Species)
cumsum(eig$values)/sum(eig$values)
lda(iris[,1:4])
iris[,1:4]
lda(iris[,1:4])
m_lda <- lda(formula = Target ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
?lda
m_lda <- lda(formula = Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
m_lda
eig
cumsum(eig$values)/sum(eig$values)
eig$values
eig$vectors
lda
m_lda$scaling
eig
eig$vectors[,1]
m_lda$scaling[,1]
eig$vectors[,1] / m_lda$scaling[,1]
sum(abs(eig$vectors[,1]))
sum(abs(m_lda$scaling[,1]))
sum((m_lda$scaling[,1]))
sum((eig$vectors[,1]))
eig$vectors[,2] / m_lda$scaling[,2]
1/0.27
m_lda$svd
str(m_lda)
eig
m_lda$scaling
m_lda$scaling
eig$vectors[,1:2]
m_lda$scaling[,1] / eig$vectors[,1]
install.packages('Titanic')
install.packages('titanic')
require(titanic)
str(Titanic)
str(titanic)
titanic_gender_class_model
str(titanic_train)
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex), mean))
temp
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fare), mean))
colnames(temp) <- c('Sex', 'Pclass', 'Fare', 'SurvivalProb')
temp
hist(titanic_train$Pclass)
hist(titanic_train$Fare)
hist(log(titanic_train$Fare))
require(arules)
titanic_train$Fareclass <- discretize(x = titanic_train$Fare, method = 'frequency', categories = 3)
titanic_train$Fareclass
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), mean))
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'SurvivalProb')
temp
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), fun = function(x) c(length(x), mean(x))))
titanic_train$Fareclass <- discretize(x = titanic_train$Fare, method = 'frequency', categories = 3)
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'SurvivalProb')
temp
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')
c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')
colnames(temp)
temp
ncol(temp)
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
temp$x <- temp$x
temp
str(temp)
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
temp
temp$x
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
temp <- cbind(temp[,-nrow(temp)], temp$x)
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')
temp
temp <- with(titanic_train, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
temp <- cbind(temp[,-ncol(temp)], temp$x)
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')
temp
glm(data = titanic_train, formula = Survived ~ Sex + Pclass + Fareclass, family = binomial('logit'))
m_logreg <- glm(data = titanic_train, formula = Survived ~ Sex + Pclass + Fareclass, family = binomial('logit'))
summary(m_logreg)
m_logreg <- glm(data = titanic_train, formula = Survived ~ Sex * Pclass + Fareclass, family = binomial('logit'))
summary(m_logreg)
m_logreg <- glm(data = titanic_train, formula = Survived ~ Sex * Pclass * Fareclass, family = binomial('logit'))
summary(m_logreg)
m_logreg_0 <- glm(data = titanic_train, formula = Survived ~ Sex * Pclass * Fareclass, family = binomial('logit'))
summary(m_logreg_0)
m_logreg_1 <- glm(data = titanic_train, formula = Survived ~ Sex * Pclass + Fareclass, family = binomial('logit'))
summary(m_logreg_1)
m_logreg_2 <- glm(data = titanic_train, formula = Survived ~ Sex + Pclass + Fareclass, family = binomial('logit'))
summary(m_logreg_2)
str(titanic$)
str(titanic)
titanic <- rbind.data.frame(titanic_train, titanic_test)
str(titanic_test)
df$Fareclass <- discretize(x = df$Fare, method = 'frequency', categories = 5)
df <- titanic_train
df$Fareclass <- discretize(x = df$Fare, method = 'frequency', categories = 5)
str(df)
?`titanic-package`
?titanic_train
table(SibSp)
table(df$SibSp)
hist(df$Fareclass)
hist(df$Fare)
df$Fareclass <- discretize(x = df$Fare, method = 'frequency', categories = 5)
boxplot(df$Fare ~ df$Survived)
boxplot(df$Fare ~ paste0('S=', df$Survived, '; C'=df$Pclass)
df$LogFare <- log(x = df$Fare, method = 'frequency', categories = 5)
# quick view at survival rates
require(arules)
temp <- with(df, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
temp <- cbind(temp[,-ncol(temp)], temp$x)
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')
#
m_logreg_0 <- glm(data = titanic_train, formula = Survived ~ Sex * Pclass * Fareclass, family = binomial('logit'))
summary(m_logreg_0)
#
m_logreg_1 <- glm(data = titanic_train, formula = Survived ~ Sex * Pclass + Fareclass, family = binomial('logit'))
summary(m_logreg_1)
#
m_logreg_2 <- glm(data = titanic_train, formula = Survived ~ Sex + Pclass + Fareclass, family = binomial('logit'))
summary(m_logreg_2)
mosaicplot(Titanic[,,,1], main = "Survival on the Titanic")
mosaicplot(Titanic[,,,2], main = "Survival on the Titanic")
## Higher survival rates in children?
apply(Titanic, c(3, 4), sum)
## Higher survival rates in females?
apply(Titanic, c(2, 4), sum)
##
df <- data.frame(Titanic)
require(FactoMineR)
is_not_0 <- which(df$Freq > 0)
famd_df <- FAMD(base = df[is_not_0,c(1:3)], row.w = df$Freq[is_not_0])
m0 <- glm(formula = Survived ~ Class + Sex + Age, data = df, family = 'binomial', weights = df$Freq)
summary(m0)
m1 <- glm(formula = Survived ~ Class * Sex * Age, data = df, family = 'binomial', weights = df$Freq)
summary(m1)
require(rpart)
ctrl <- rpart.control(
minsplit = 5, minbucket = round(20/3), cp = 0.01,
maxcompete = 4, maxsurrogate = 5, usesurrogate = 2, xval = 10,
surrogatestyle = 0, maxdepth = 30)
m2 <- rpart(formula = Survived ~ Class + Sex + Age, data = df, weights = df$Freq, control = ctrl)
m2
df2 <- data.frame(famd_df$ind$coord, 'Survived' = df$Survived[is_not_0])
m3 <- glm(formula = Survived ~ Dim.1 * Dim.2 * Dim.3, data = df2, family = 'binomial')
summary(m3)
pred_m0 <- predict(m0, type = 'response')
pred_m1 <- predict(m1, type = 'response')
pred_m2 <- predict(m2)[,2]
pred_m3 <- predict(m3, type = 'response')
plot.ts(sort(pred_m0), ylim = c(0,1))
lines(sort(pred_m1), col = 'red')
lines(sort(pred_m2), col = 'blue')
lines(sort(pred_m3), col = 'orange')
myRoc <- compute_roc(y = 1*(df$Survived=='No'), yhat = as.numeric(pred_m3))
plot.ts(y = c(myRoc[,1],0), x = c(myRoc[,2],0))
abline(0,1)
boxplot(df$Fare ~ paste0('S=', df$Survived, '; C'=df$Pclass))
paste0('S=', df$Survived, '; C'=df$Pclass)
boxplot(df$Fare ~ paste0('S=', df$Survived, '; C'=df$Pclass))
boxplot(df$Fare ~ factor(paste0('S=', df$Survived, '; C'=df$Pclass)))
factor(paste0('S=', df$Survived, '; C'=df$Pclass))
df$Fare
df <- titanic_train
boxplot(df$Fare ~ factor(paste0('S=', df$Survived, '; C'=df$Pclass)))
boxplot(df$LogFare ~ factor(paste0('S=', df$Survived, '; C'=df$Pclass)))
df$LogFare
df$LogFare <- log(df$Fare)
boxplot(df$LogFare ~ factor(paste0('S=', df$Survived, '; C'=df$Pclass)))
df$LogFare
df$Fare
df[df$Fare == 0]
df[df$Fare == 0,]
df[df$Fare > 0,]
df$Fareclass <- discretize(x = df$Fare, method = 'frequency', categories = 5)
require(arules)
temp <- with(df, aggregate(x = Survived, by = list(Sex, Pclass, Fareclass), FUN = function(x) c(length(x), mean(x))))
temp <- cbind(temp[,-ncol(temp)], temp$x)
colnames(temp) <- c('Sex', 'Pclass', 'Fareclass', 'N', 'SurvivalProb')
m_logreg_0 <- glm(data = titanic_train, formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, family = binomial('logit'))
summary(m_logreg_0)
df$Ageclass <-  discretize(x = df$Age, method = 'frequency', categories = 5)
m_logreg_0 <- glm(data = titanic_train,
formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Ageclass, family = binomial('logit'))
df$Ageclass <-  discretize(x = df$Age, method = 'frequency', categories = 5)
m_logreg_0 <- glm(data = titanic_train,
formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Ageclass, family = binomial('logit'))
m_logreg_0 <- glm(data = df,
formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Ageclass, family = binomial('logit'))
summary(m_logreg_0)
m_logreg_0 <- glm(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age,
data = df, family = binomial('logit'))
summary(m_logreg_0)
m_logreg_1 <- glm(formula = Survived ~ Sex * Pclass * Fareclass + Embarked + Parch + SibSp + Ageclass,
data = df, family = binomial('logit'))
summary(m_logreg_1)
m_logreg_2 <- glm(formula = Survived ~ Sex * Pclass * Fareclass,
data = df, family = binomial('logit'))
summary(m_logreg_2)
rpart(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age)
rpart(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df)
rp0 <- rpart(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df)
rp0
df <- df[sample(1:nrow(df)),]
index_train <- 1:floor(nrow(df)/2)
df_train <- df[index_train,]
df_test <- df[-index_train,]
m_logreg_0 <- glm(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age,
data = df_train, family = binomial('logit'))
summary(m_logreg_0)
m_logreg_1 <- glm(formula = Survived ~ Sex * Pclass * Fareclass + Embarked + Parch + SibSp + Ageclass,
data = df_train, family = binomial('logit'))
summary(m_logreg_1)
m_logreg_2 <- glm(formula = Survived ~ Sex * Pclass * Fareclass,
data = df_train, family = binomial('logit'))
summary(m_logreg_2)
predict(object = m_logreg_0, newdata = df_test)
predict(object = m_logreg_0, newdata = df_test, type = 'response')
m_logreg <- list(m_logreg_0, m_logreg_1, m_logreg_2)
m_logreg_predSurvived <- sapply(1:length(m_logreg), function(i){
predict(object = m_logreg[[i]], newdata = df_test, type = 'response')
})
predSurvived <- sapply(1:length(m_logreg), function(i){
predict(object = m_logreg[[i]], newdata = df_test, type = 'response')
})
predSurvived
round(predSurvived,2
)
predict(object = rp0, newdata = df_test, type = 'response')
predict(object = rp0, newdata = df_test, type = 'prob')
predict(object = rp0, newdata = df_test, type = 'class')
predict(object = rp0, newdata = df_test, type = 'matrix')
predSurvived$rp0 <- predict(object = rp0, newdata = df_test, type = 'matrix')
predSurvived$rp0 <- as.numeric(predict(object = rp0, newdata = df_test, type = 'matrix'))
predSurvived
predict(object = m_logreg[[i]], newdata = df_test, type = 'response')
predSurvived <- sapply(1:length(m_logreg), function(i){
p <- predict(object = m_logreg[[i]], newdata = df_test, type = 'response')
as.numeric(p)
})
predSurvived
str(predSurvived)
predSurvived <- data.frame(predSurvived)
colnames(predSurvived) <- paste0('LR', 0:2)
rp0 <- rpart(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df)
predSurvived$rp0 <- as.numeric(predict(object = rp0, newdata = df_test, type = 'matrix'))
predSurvived
str(predSurvived)
matplot(predSurvived)
matplot(predSurvived, type ='l')
matplot(t(predSurvivedà), type ='l')
matplot(t(predSurvived), type ='l')
matplot(t(predSurvived), type ='l', col = 'black')
matplot(t(predSurvived), type ='l', col = 'black', lty = 1)
lapply(1:4, function(i){
table('pred' = predSurvived[,i], 'target' = df_test$Survived)
})
table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
lapply(1:4, function(i){
table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
})
lapply(1:ncol(predSurvived), function(i){
table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
})
str(predSurvived)
lapply(1:ncol(predSurvived), function(i){
cat(colnames(predSurvived)[i])
table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
})
lapply(1:ncol(predSurvived), function(i){
list(
colnames(predSurvived)[i],
table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
)
})
df_test$Survived
lapply(1:ncol(predSurvived), function(i){
list(
'MODEL_NAME' = colnames(predSurvived)[i],
'ERROR_RATE' = sum(1*(predSurvived[,i] > 0.5) != df_test$Survived) / nrow(df_test),
'CONFUSION_MATRIX' = table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
)
})
lapply(1:ncol(predSurvived), function(i){
pred_is_na <- which(is.na(predSurvived))
list(
'MODEL_NAME' = colnames(predSurvived)[i],
'ERROR_RATE' = sum(1*(predSurvived[-pred_is_na,i] > 0.5) != df_test$Survived[-pred_is_na]) / (nrow(df_test) - length(pred_is_na)),
'CONFUSION_MATRIX' = table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
)
})
lapply(1:ncol(predSurvived), function(i){
pred_is_na <- which(is.na(predSurvived[,i]))
list(
'MODEL_NAME' = colnames(predSurvived)[i],
'ERROR_RATE' = sum(1*(predSurvived[-pred_is_na,i] > 0.5) != df_test$Survived[-pred_is_na]) / (nrow(df_test) - length(pred_is_na)),
'CONFUSION_MATRIX' = table('pred' = 1*(predSurvived[,i] > 0.5), 'target' = df_test$Survived)
)
})
i = 4
pred_is_na <- which(is.na(predSurvived[,i]))
pred_is_na
predSurvived[-pred_is_na,i]
lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
require(randomForest)
set.seed(643)
rf0 <- randomForest(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df)
rp0
rf0 <- randomForest(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df)
rf0 <- randomForest(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
rf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
str(df)
rp0 <- rpart(formula = Survived ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df_train)
predSurvived$rp0 <- as.numeric(predict(object = rp0, newdata = df_test, type = 'matrix'))
lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
matplot(t(predSurvived), type ='l', col = 'black', lty = 1)
rf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
str(df)
rf0 <- randomForest(formula = factor(Survived) ~ factor(Sex) + factor(Pclass) + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
df$Sex <- factor(df$Sex)
rf0 <- randomForest(formula = factor(Survived) ~ Sex + factor(Pclass) + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
rf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
df$Embarked <- factor(df$Embarked)
rf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df, na.action = na.omit)
predSurvived$rf0 <- as.numeric(predict(object = rf0, newdata = df_test, type = 'matrix'))
predict(object = rf0, newdata = df_test, type = 'response')
df_train <- df[index_train,]
df_test <- df[-index_train,]
rf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp + Age, data = df_train, na.action = na.omit)
predSurvived$rf0 <- as.numeric(predict(object = rf0, newdata = df_test, type = 'response'))
rf0
varImpPlot(rf0)
matplot(t(predSurvived), type ='l', col = 'black', lty = 1)
predSurvived
predict(object = rf0, newdata = df_test, type = 'response')
predSurvived$rf0 <- as.numeric(as.character(predict(object = rf0, newdata = df_test, type = 'response')))
matplot(t(predSurvived), type ='l', col = 'black', lty = 1)
lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
set.seed(643)
rf0 <- randomForest(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp, data = df_train, na.action = na.omit)
predSurvived$rf0 <- as.numeric(as.character(predict(object = rf0, newdata = df_test, type = 'response')))
varImpPlot(rf0)
matplot(t(predSurvived), type ='l', col = 'black', lty = 1)
lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
lda(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp, data = df_train)
m_lda <- lda(formula = factor(Survived) ~ Sex + Pclass + Fare + Embarked + Parch + SibSp, data = df_train)
m_lda
predict(object = m_lda, newdata = df_test)
predSurvived$LDA <- lda(df_train[,c('Sex', 'Pclass', 'Fare', 'Embarked', 'Parch', 'SibSp')])$posterior[,2]
predSurvived$LDA <- predict(object = m_lda, newdata = df_test)$posterior[,2]
matplot(t(predSurvived), type ='l', col = 'black', lty = 1)
lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
predSurvived
predSurvived$Cmin <- apply(predSurvived[,1:6], 1, function(x) min(x, na.rm = TRUE))
predSurvived$Cmax <- apply(predSurvived[,1:6], 1, function(x) max(x, na.rm = TRUE))
lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
res <- lapply(1:ncol(predSurvived), function(i){
r <- list('model_name' = colnames(predSurvived)[i])
pred_is_not_na <- which(!is.na(predSurvived[,i]))
if(length(pred_is_not_na) == 0){
r$error_msg <- 'Model sent back NA for each observation of the dataset sent.'
r$nb_NAs <- nrow(df_test)
return(r)
}
r$error_msg <- ''
r$nb_NAs <- nrow(df_test) - length(pred_is_not_na)
r$error_rate <- sum(1*(predSurvived[pred_is_not_na,i] > 0.5) != df_test$Survived[pred_is_not_na]) / length(pred_is_not_na)
r$confusion_matrix <- table('pred' = 1*(predSurvived[pred_is_not_na,i] > 0.5), 'target' = df_test$Survived[pred_is_not_na])
return(r)
})
sapply(res, function(x) x$error_rate)
names(res)
sapply(res, function(x) x$model_namer)
sapply(res, function(x) x$model_name)
sapply(res, function(x) x$error_rate)
